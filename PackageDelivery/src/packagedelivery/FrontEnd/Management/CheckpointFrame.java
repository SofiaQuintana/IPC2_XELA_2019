/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package packagedelivery.FrontEnd.Management;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.observablecollections.ObservableList;
import packagedelivery.DBmanagers.CheckpointDBManager;
import packagedelivery.DBmanagers.DBManager;
import packagedelivery.DBmanagers.RouteDBManager;
import packagedelivery.DBmanagers.UserDBManager;
import packagedelivery.DummyClasses.Checkpoint;
import packagedelivery.DummyClasses.Rate;
import packagedelivery.DummyClasses.Route;
import packagedelivery.DummyClasses.User;

/**
 *
 * @author zofia
 */
public class CheckpointFrame extends javax.swing.JInternalFrame {
    private Connection connection;
    private Checkpoint checkpoint;
    private List<Checkpoint> checkpoints;
    private List<Route> routes;
    private List<Rate> rate;
    private List<User> users;
    private ObservableList<Checkpoint> checkpointObservable;
    private CheckpointDBManager checkpointManager;
    private RouteDBManager routeManager;
    private UserDBManager userManager;
    private DBManager rateManager;
    private UpdateDialog update;
    private static final String GENERAL_QUERY = "SELECT * FROM Checkpoint;";
    private static final String ASC_BY_CHECKPOINT_QUERY = "SELECT * FROM Checkpoint ORDER BY IdCheckpoint ASC";
    private static final String DESC_BY_CHECKPOINT_QUERY = "SELECT * FROM Checkpoint ORDER BY IdCheckpoint DESC";
    private static final String SELECTION = "SELECT * FROM Checkpoint ORDER BY ";
    private static final String ROUTES_QUERY = "SELECT * FROM Route WHERE Availability = 1 AND Disabled = 0;";
    private static final String USER_QUERY = "SELECT * FROM User WHERE Role = 'Operador' AND Availability = 1";
    private static final String RATE_QUERY = "SELECT * FROM Rate;";
    private static final String RATE_DEFAULT = "UNICO";
    private static final String DESACTIVATE_QUERY = "UPDATE Checkpoint SET Disabled = 1 WHERE IdCheckpoint = ";
    /**
     * Creates new form CheckpointFrame
     */
    public CheckpointFrame(Connection connection) {
        routes = new ArrayList<>();
        users = new ArrayList<>();
        checkpoints = new ArrayList<>();
        checkpointObservable = ObservableCollections.observableList(checkpoints);
        initComponents();
        this.connection = connection;
        checkpointManager = new CheckpointDBManager(connection);
        rateManager = new DBManager(connection);
        routeManager = new RouteDBManager(connection);
        userManager = new UserDBManager(connection);
        setComboBoxesModel();
        refreshObservableList(checkpointManager.getElements(GENERAL_QUERY));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        searchingText = new javax.swing.JLabel();
        elementText = new javax.swing.JLabel();
        searchingComboBox = new javax.swing.JComboBox<>();
        orderText = new javax.swing.JLabel();
        orderComboBox = new javax.swing.JComboBox<>();
        searchingButton = new javax.swing.JButton();
        createUserPanel = new javax.swing.JTabbedPane();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        desactivateButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        createPanel = new javax.swing.JPanel();
        creatStuffPanel = new javax.swing.JPanel();
        idField = new javax.swing.JTextField();
        roleText = new javax.swing.JLabel();
        nameText = new javax.swing.JLabel();
        operatorComboBox = new javax.swing.JComboBox<>();
        passwordText = new javax.swing.JLabel();
        lastNameText = new javax.swing.JLabel();
        createButton = new javax.swing.JButton();
        userText = new javax.swing.JLabel();
        routeComboBox = new javax.swing.JComboBox<>();
        sizeSpinner = new javax.swing.JSpinner();
        globalFeeCheckbox = new javax.swing.JCheckBox();
        roleText1 = new javax.swing.JLabel();
        feeField = new javax.swing.JTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Puntos de control");

        searchingText.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 16)); // NOI18N
        searchingText.setForeground(new java.awt.Color(0, 51, 102));
        searchingText.setText("Busqueda Personalizada--------------------------------------------------------------------");

        elementText.setText("Por Elemento:");

        searchingComboBox.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        searchingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---vacio---", "IdCheckpoint", "Route_Id", "User_name", "GlobalFare", "SpecialFare" }));

        orderText.setText("Orden:");

        orderComboBox.setForeground(new java.awt.Color(153, 153, 153));
        orderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-vacio-", "ASC", "DESC" }));

        searchingButton.setBackground(new java.awt.Color(153, 153, 153));
        searchingButton.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        searchingButton.setForeground(new java.awt.Color(102, 102, 102));
        searchingButton.setText("Buscar");
        searchingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchingButtonActionPerformed(evt);
            }
        });

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${checkpointObservable}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, table);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${checkpointId}"));
        columnBinding.setColumnName("Checkpoint Id");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${routeId}"));
        columnBinding.setColumnName("Route Id");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${operatorName}"));
        columnBinding.setColumnName("Operator Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${globalFare}"));
        columnBinding.setColumnName("Global Fare");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${specialFare}"));
        columnBinding.setColumnName("Special Fare");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${disabled}"));
        columnBinding.setColumnName("Disabled");
        columnBinding.setColumnClass(Boolean.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(table);

        desactivateButton.setBackground(new java.awt.Color(153, 153, 153));
        desactivateButton.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        desactivateButton.setForeground(new java.awt.Color(102, 102, 102));
        desactivateButton.setText("Desactivar");
        desactivateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desactivateButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(153, 153, 153));
        updateButton.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(102, 102, 102));
        updateButton.setText("Actualizar Datos");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText("Seleccione una fila -----------------------------------------");

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desactivateButton)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desactivateButton)
                    .addComponent(updateButton)
                    .addComponent(jLabel2))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        createUserPanel.addTab("Puntos de control", tablePanel);

        creatStuffPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        roleText.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 15)); // NOI18N
        roleText.setForeground(new java.awt.Color(0, 51, 102));
        roleText.setText("Tarifa Global:");

        nameText.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 15)); // NOI18N
        nameText.setForeground(new java.awt.Color(0, 51, 102));
        nameText.setText("Ruta:");

        passwordText.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 15)); // NOI18N
        passwordText.setForeground(new java.awt.Color(0, 51, 102));
        passwordText.setText("Tamaño:");

        lastNameText.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 15)); // NOI18N
        lastNameText.setForeground(new java.awt.Color(0, 51, 102));
        lastNameText.setText("Operador:");

        createButton.setBackground(new java.awt.Color(153, 153, 153));
        createButton.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        createButton.setForeground(new java.awt.Color(102, 102, 102));
        createButton.setText("Crear");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        userText.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 15)); // NOI18N
        userText.setForeground(new java.awt.Color(0, 51, 102));
        userText.setText("ID:");

        routeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        sizeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));

        globalFeeCheckbox.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 10)); // NOI18N
        globalFeeCheckbox.setForeground(new java.awt.Color(102, 102, 102));
        globalFeeCheckbox.setText("Seleccione para asignar tarifa global");
        globalFeeCheckbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                globalFeeCheckboxMouseClicked(evt);
            }
        });

        roleText1.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 15)); // NOI18N
        roleText1.setForeground(new java.awt.Color(0, 51, 102));
        roleText1.setText("Tarifa Independiente:");

        javax.swing.GroupLayout creatStuffPanelLayout = new javax.swing.GroupLayout(creatStuffPanel);
        creatStuffPanel.setLayout(creatStuffPanelLayout);
        creatStuffPanelLayout.setHorizontalGroup(
            creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creatStuffPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(creatStuffPanelLayout.createSequentialGroup()
                        .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameText)
                            .addComponent(nameText)
                            .addComponent(userText)
                            .addComponent(passwordText)
                            .addComponent(roleText)
                            .addComponent(roleText1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(idField)
                                .addComponent(operatorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(routeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(globalFeeCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                                .addComponent(feeField, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, creatStuffPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        creatStuffPanelLayout.setVerticalGroup(
            creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creatStuffPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userText)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameText)
                    .addComponent(routeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameText)
                    .addComponent(operatorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordText)
                    .addComponent(sizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roleText)
                    .addComponent(globalFeeCheckbox))
                .addGap(18, 18, 18)
                .addGroup(creatStuffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roleText1)
                    .addComponent(feeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createButton)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout createPanelLayout = new javax.swing.GroupLayout(createPanel);
        createPanel.setLayout(createPanelLayout);
        createPanelLayout.setHorizontalGroup(
            createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(creatStuffPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(201, Short.MAX_VALUE))
        );
        createPanelLayout.setVerticalGroup(
            createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(creatStuffPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
        );

        createUserPanel.addTab("Crear punto de control", createPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(elementText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(168, 168, 168)
                .addComponent(orderText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(createUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(searchingText))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchingButton)
                    .addComponent(searchingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(elementText)
                    .addComponent(orderText))
                .addContainerGap(611, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(searchingText)
                    .addGap(63, 63, 63)
                    .addComponent(createUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchingButtonActionPerformed
        // TODO add your handling code here:
        if(searchingComboBox.getModel().getSelectedItem().equals("---vacio---") &&
            !orderComboBox.getModel().getSelectedItem().equals("-vacio-")) {
            if(orderComboBox.getModel().getSelectedItem().equals("ASC")) {
                refreshObservableList(checkpointManager.getElements(ASC_BY_CHECKPOINT_QUERY));
            } else {
                refreshObservableList(checkpointManager.getElements(DESC_BY_CHECKPOINT_QUERY));
            }
        } else if(!searchingComboBox.getModel().getSelectedItem().equals("---vacio---")
            && !orderComboBox.getModel().getSelectedItem().equals("-vacio-")) {
            String data = searchingComboBox.getModel().getSelectedItem().toString();
            String order = orderComboBox.getModel().getSelectedItem().toString();
            String query = SELECTION + data + " " +order;
            refreshObservableList(checkpointManager.getElements(query));
        } else if(searchingComboBox.getModel().getSelectedItem().equals("---vacio---") &&
            orderComboBox.getModel().getSelectedItem().equals("-vacio-")) {
            refreshObservableList(checkpointManager.getElements(GENERAL_QUERY));
        }
    }//GEN-LAST:event_searchingButtonActionPerformed

    private void desactivateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desactivateButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = table.getSelectedRow();
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una fila...", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            desactivateSelectedCheckpoint(selectedRow);
            refreshObservableList(checkpointManager.getElements(GENERAL_QUERY));
            JOptionPane.showMessageDialog(this, "Punto de control desactivado con exito!", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_desactivateButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = table.getSelectedRow();
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una fila...", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            getSelectedCheckpoint(selectedRow);
            update = new UpdateDialog(true, connection, null, null, this.checkpoint);
            update.setVisible(true);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
        if(idField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese todos los campos...", "Error", JOptionPane.ERROR_MESSAGE);
        } else if(globalFeeCheckbox.isSelected()) {
            try {
                this.rate = rateManager.getRate(RATE_QUERY);
                Rate generalRate = this.rate.get(0);
                checkpointManager.addCheckpoint(idField.getText(), routeComboBox.getModel().getSelectedItem().toString(), 
                        operatorComboBox.getModel().getSelectedItem().toString(), RATE_DEFAULT,
                        (int) sizeSpinner.getModel().getValue(), generalRate.getGlobalFare(), 0, true, false);
                cleanFields();
                JOptionPane.showMessageDialog(this, "Punto de control creado con exito...", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {           
            try {
                checkpointManager.addCheckpoint(idField.getText(), routeComboBox.getModel().getSelectedItem().toString(), 
                        operatorComboBox.getModel().getSelectedItem().toString(), RATE_DEFAULT,
                        (int) sizeSpinner.getModel().getValue(), 0, Double.parseDouble(feeField.getText()), true, false);
                cleanFields();
                JOptionPane.showMessageDialog(this, "Punto de control creado con exito...", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                refreshObservableList(checkpointManager.getElements(GENERAL_QUERY));
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void globalFeeCheckboxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_globalFeeCheckboxMouseClicked
        // TODO add your handling code here:
        if(globalFeeCheckbox.isSelected()) {
            feeField.disable();
            JOptionPane.showMessageDialog(this, "Tarifa asignada...", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        } else {
            feeField.enable();
        }      
    }//GEN-LAST:event_globalFeeCheckboxMouseClicked
    
     public void getSelectedCheckpoint(int selectedRow) {
        String selectedCheckpoint = table.getModel().getValueAt(selectedRow, 0).toString();
        this.checkpoint = checkpointManager.getCheckpointInList(selectedCheckpoint);
    }
     
    public void desactivateSelectedCheckpoint(int selectedRow) {
        String selectedCheckpoint = table.getModel().getValueAt(selectedRow, 0).toString();
        String query = DESACTIVATE_QUERY + "'"+selectedCheckpoint+"';";
        rateManager.updateElement(query);
    }
    
    public void cleanFields() {
         idField.setText("");
         setComboBoxesModel();
         sizeSpinner.getModel().setValue(1);
         globalFeeCheckbox.setSelected(false);
         feeField.setText("");
    }
    
    public void setComboBoxesModel() {
        Vector userVector = new Vector();
        Vector routeVector = new Vector();
        this.users = userManager.getUsers(USER_QUERY);
        this.routes = routeManager.getRoutes(ROUTES_QUERY);
        User user;
        Route route;
        for (int i = 0; i < users.size(); i++) {
            user = users.get(i);
            userVector.add(user.getUsername());
        }
        
        for (int i = 0; i < routes.size(); i++) {
            route = routes.get(i);
            routeVector.add(route.getRouteId());
        }
        
        DefaultComboBoxModel userModel = new DefaultComboBoxModel(userVector);
        DefaultComboBoxModel routeModel = new DefaultComboBoxModel(routeVector);
        
        this.operatorComboBox.setModel(userModel);
        this.routeComboBox.setModel(routeModel);
    }
    
    public void refreshObservableList(List<Checkpoint> list) {
        this.checkpointObservable.clear();
        this.checkpointObservable.addAll(list);
    }

    public ObservableList<Checkpoint> getCheckpointObservable() {
        return checkpointObservable;
    }

    public void setCheckpointObservable(ObservableList<Checkpoint> checkpointObservable) {
        this.checkpointObservable = checkpointObservable;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel creatStuffPanel;
    private javax.swing.JButton createButton;
    private javax.swing.JPanel createPanel;
    private javax.swing.JTabbedPane createUserPanel;
    private javax.swing.JButton desactivateButton;
    private javax.swing.JLabel elementText;
    private javax.swing.JTextField feeField;
    private javax.swing.JCheckBox globalFeeCheckbox;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastNameText;
    private javax.swing.JLabel nameText;
    private javax.swing.JComboBox<String> operatorComboBox;
    private javax.swing.JComboBox<String> orderComboBox;
    private javax.swing.JLabel orderText;
    private javax.swing.JLabel passwordText;
    private javax.swing.JLabel roleText;
    private javax.swing.JLabel roleText1;
    private javax.swing.JComboBox<String> routeComboBox;
    private javax.swing.JButton searchingButton;
    private javax.swing.JComboBox<String> searchingComboBox;
    private javax.swing.JLabel searchingText;
    private javax.swing.JSpinner sizeSpinner;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel userText;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
